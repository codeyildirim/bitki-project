import React, { createContext, useContext, useState, useEffect } from 'react';
import axios from 'axios';
import toast from 'react-hot-toast';
import { API_CONFIG } from '../config/api.js';
import storage from '../utils/storage.js';

// Production'da Vercel Functions kullan
console.log('‚úÖ Production: Vercel Functions API kullanƒ±lƒ±yor');

const AuthContext = createContext();

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider = ({ children }) => {
  console.log('üöÄ AuthContext: AuthProvider olu≈üturuldu');

  // Clear old localStorage data that might conflict with API
  useEffect(() => {
    console.log('üßπ AuthContext: Eski localStorage verileri temizleniyor');
    storage.cleanupOldKeys();
  }, []);

  // Initial state'i storage servisinden g√ºvenli ≈üekilde al
  const [user, setUser] = useState(() => {
    return storage.getUser();
  });

  const [loading, setLoading] = useState(true);
  const [token, setToken] = useState(() => {
    return storage.getToken();
  });

  useEffect(() => {
    console.log('üîÑ AuthContext useEffect: token deƒüi≈üti:', token, 'user var mƒ±:', !!user);
    if (token) {
      console.log('üîë AuthContext: Authorization header ayarlanƒ±yor');
      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;

      // Eƒüer user yoksa ve localStorage'dan da alamadƒ±ysak fetchProfile √ßaƒüƒ±r
      if (!user) {
        console.log('üìã AuthContext: User yok - fetchProfile √ßaƒürƒ±lƒ±yor');
        fetchProfile();
      } else {
        console.log('‚úÖ AuthContext: User mevcut, loading false yapƒ±lƒ±yor');
        setLoading(false);
      }
    } else {
      console.log('‚ö†Ô∏è AuthContext: Token yok, loading false yapƒ±lƒ±yor');
      setLoading(false);
    }
  }, [token]);

  const fetchProfile = async () => {
    try {
      console.log('üîÑ AuthContext: fetchProfile ba≈ülatƒ±ldƒ±');
      const storedToken = storage.getToken();
      const storedUser = storage.getUser();

      console.log('üì¶ AuthContext: storedToken:', storedToken);
      console.log('üë§ AuthContext: storedUser:', storedUser);

      if (storedToken && storedUser) {
        setToken(storedToken);
        setUser(storedUser);
        console.log('‚úÖ AuthContext: Kullanƒ±cƒ± session restore edildi');
      } else {
        console.log('‚ö†Ô∏è AuthContext: Token veya user bulunamadƒ±');
      }
    } catch (error) {
      console.error('‚ùå Profil getirme hatasƒ±:', error);
      console.log('üóëÔ∏è storage temizleniyor...');
      storage.clearAuth();
      setToken(null);
      setUser(null);
    } finally {
      setLoading(false);
    }
  };

  const login = async (nickname, password, captchaToken) => {
    try {
      console.log('üîê Login i≈ülemi ba≈ülatƒ±ldƒ±');

      // Backend API endpoint
      const response = await axios.post(`${API_CONFIG.BASE_URL}/api/auth/login`, {
        nickname,
        password,
        captchaToken
      });

      if (response.data.success) {
        const { token, user } = response.data.data;

        // Token ve user bilgilerini storage servisi ile kaydet
        storage.setAuth(token, user);

        // Axios header'ƒ±na token ekle
        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;

        // State g√ºncelle
        setToken(token);
        setUser(user);

        toast.success('Giri≈ü ba≈üarƒ±lƒ±!');
        return { success: true };
      } else {
        throw new Error(response.data.message);
      }

    } catch (error) {
      const message = error.response?.data?.message || error.message || 'Giri≈ü ba≈üarƒ±sƒ±z';
      toast.error(message);
      return { success: false, message };
    }
  };

  const register = async (userData) => {
    try {
      console.log('üîß Register i≈ülemi ba≈ülatƒ±ldƒ±');

      const { nickname, password, confirmPassword, city, captchaToken } = userData;

      // Backend API endpoint
      const response = await axios.post(`${API_CONFIG.BASE_URL}/api/auth/register`, {
        nickname,
        password,
        confirmPassword,
        city,
        captchaToken
      });

      if (response.data.success) {
        const { token, user, recoveryCode } = response.data.data;

        // Token ve user bilgilerini storage servisi ile kaydet
        storage.setAuth(token, user);

        // Axios header'ƒ±na token ekle
        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;

        // State g√ºncelle
        setToken(token);
        setUser(user);

        toast.success('Kayƒ±t ba≈üarƒ±lƒ±! Kurtarma kodunuz: ' + recoveryCode);
        return { success: true, recoveryCode };
      } else {
        throw new Error(response.data.message);
      }

    } catch (error) {
      const message = error.response?.data?.message || error.message || 'Kayƒ±t ba≈üarƒ±sƒ±z';
      toast.error(message);
      return { success: false, message };
    }
  };

  const recoverPassword = async (recoveryData) => {
    try {
      const response = await axios.post('/api/auth/recover-password', recoveryData);
      if (response.data.success) {
        toast.success('≈ûifre sƒ±fƒ±rlandƒ±!');
        return { success: true, newRecoveryCode: response.data.data.newRecoveryCode };
      }
    } catch (error) {
      const message = error.response?.data?.message || '≈ûifre kurtarma hatasƒ±';
      toast.error(message);
      return { success: false, message };
    }
  };

  const logout = () => {
    console.log('üö™ AuthContext: Logout i≈ülemi ba≈ülatƒ±ldƒ±');

    // Storage'ƒ± temizle
    storage.clearAuth();

    // State'leri temizle
    setToken(null);
    setUser(null);

    // Axios header'ƒ±nƒ± temizle
    delete axios.defaults.headers.common['Authorization'];

    toast.success('√áƒ±kƒ±≈ü yapƒ±ldƒ±');
    console.log('‚úÖ AuthContext: Logout tamamlandƒ±');
  };

  const updateProfile = async (profileData) => {
    try {
      const response = await axios.put('/api/auth/profile', profileData);
      if (response.data.success) {
        await fetchProfile();
        toast.success('Profil g√ºncellendi');
        return { success: true };
      }
    } catch (error) {
      const message = error.response?.data?.message || 'Profil g√ºncelleme hatasƒ±';
      toast.error(message);
      return { success: false, message };
    }
  };

  const value = {
    user,
    loading,
    login,
    register,
    logout,
    recoverPassword,
    updateProfile,
    isAuthenticated: !!user,
    isAdmin: user?.is_admin === 1
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};